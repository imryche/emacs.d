(require 'autothemer)

(autothemer-deftheme
 nohl "A theme with no syntax highlighting"

 ((((class color) (min-colors #xFFFFFF))) ;; We're only concerned with graphical Emacs

  ;; Define our color palette
  (nohl-bg "#1d1f21")
  (nohl-contrast-bg "#373b41")
  (nohl-low-contrast-bg "#22a224a427a7")
  (nohl-fg "#c5c8c6")
  (nohl-selection "#373b41")
  (nohl-highlight "#282a2e")
  (nohl-comment "#969896")
  (nohl-red "#cc6666")
  (nohl-orange "#de935f")
  (nohl-yellow "#f0c674")
  (nohl-green "#b5bd68")
  (nohl-aqua "#8abeb7")
  (nohl-blue "#81a2be")
  (nohl-purple "#b294bb")
  )

 ;; Customize faces
 (
  ;; standard faces
  (default (:foreground nohl-fg :background nohl-bg))
  (bold (:weight 'bold))
  (bold-italic (:slant 'italic :weight 'bold))
  (underline (:underline t))
  (italic (:slant 'italic))
  (font-lock-builtin-face (:foreground nohl-fg))
  (font-lock-comment-delimiter-face (:foreground nohl-comment :slant 'italic))
  (font-lock-comment-face (:foreground nohl-comment :slant 'italic))

  (font-lock-constant-face (:foreground nohl-fg))
  ;; (font-lock-doc-face (:foreground nohl-purple))
  ;; (font-lock-doc-string-face (:foreground nohl-yellow))

  (font-lock-function-name-face (:foreground nohl-fg))
  (font-lock-keyword-face (:foreground nohl-fg))

  ;; (font-lock-negation-char-face (:foreground nohl-blue))
  ;; (font-lock-preprocessor-face (:foreground nohl-purple))
  ;; (font-lock-regexp-grouping-backslash (:foreground nohl-yellow))
  ;; (font-lock-regexp-grouping-construct (:foreground nohl-purple))

  (font-lock-string-face (:foreground nohl-fg))
  (font-lock-type-face (:foreground nohl-fg))
  (font-lock-variable-name-face (:foreground nohl-fg))

  ;; (font-lock-warning-face (:weight 'bold :foreground nohl-red))

  (shadow (:foreground nohl-comment))
  (fill-column-indicator (:foreground nohl-contrast-bg))
  (success (:foreground nohl-green))
  (error (:foreground nohl-red))
  (warning (:foreground nohl-orange))
  (tooltip (:foreground nohl-yellow :background nohl-bg :inverse-video t))

  ;; Emacs interface
  (cursor (:background nohl-red))
  (fringe (:background nohl-low-contrast-bg :foreground nohl-comment))
  (linum (:background nohl-low-contrast-bg :foreground nohl-comment :italic nil :underline nil))
  (line-number (:background nohl-low-contrast-bg :foreground nohl-comment))
  (line-number-current-line (:inherit 'line-number :foreground nohl-fg :weight 'bold))
  (fill-column-indicator (:foreground nohl-contrast-bg :weight 'normal :slant 'normal
                                      :underline nil :overline nil :strike-through nil
                                      :box nil :inverse-video nil :stipple nil))
  (vertical-border (:foreground nohl-contrast-bg))
  (border (:background nohl-contrast-bg :foreground nohl-highlight))
  (highlight (:inverse-video nil :background nohl-highlight))
  (mode-line (:foreground nohl-fg :background nohl-contrast-bg :weight 'normal
                          :box (:line-width 1 :color nohl-contrast-bg)))
  (mode-line-buffer-id (:foreground nohl-purple :background nil))
  (mode-line-inactive (:inherit 'mode-line
                                :foreground nohl-comment
                                :background nohl-highlight
                                :weight 'normal))
  (mode-line-emphasis (:foreground nohl-fg :slant 'italic))
  (mode-line-highlight (:foreground nohl-purple :box nil :weight 'bold))
  (minibuffer-prompt (:foreground nohl-blue))
  (region (:background nohl-contrast-bg :inverse-video nil :extend t))
  (secondary-selection (:background nohl-highlight :extend t))

  (header-line (:inherit 'mode-line-inactive :foreground nohl-aqua :background nil))

  ;; search
  (match (:foreground nohl-blue :background nohl-bg :inverse-video t))
  (isearch (:foreground nohl-yellow :background nohl-bg :inverse-video t))
  (lazy-highlight (:foreground nohl-aqua :background nohl-bg :inverse-video t))
  (isearch-fail (:background nohl-bg :inherit 'font-lock-warning-face :inverse-video t))

  (link (:foreground nil :underline t))
  (widget-button (:underline t))
  (widget-field (:background nohl-contrast-bg :box (:line-width 1 :color nohl-fg)))

  ;; dired
  (dired-header (:foreground nohl-blue))
  (dired-directory (:foreground nohl-orange))
  (dired-perm-write (:foreground nohl-fg))

  ;; which-key
  (which-key-key-face (:foreground nohl-orange))

  ;; ansi-color (built-in, face scheme below from Emacs 28.1 onwards)
  ;; (ansi-color-black (:foreground ,term-black :background ,term-black))
  ;; (ansi-color-red (:foreground nohl-red :background nohl-red))
  ;; (ansi-color-green (:foreground nohl-green :background nohl-green))
  ;; (ansi-color-yellow (:foreground nohl-yellow :background nohl-yellow))
  ;; (ansi-color-blue (:foreground nohl-blue :background nohl-blue))
  ;; (ansi-color-magenta (:foreground nohl-purple :background nohl-purple))
  ;; (ansi-color-cyan (:foreground nohl-aqua :background nohl-aqua))
  ;; (ansi-color-white (:foreground ,term-white :background ,term-white))
  ;; (ansi-color-bright-black (:inherit ansi-color-black :weight 'bold))
  ;; (ansi-color-bright-red (:inherit ansi-color-red :weight 'bold))
  ;; (ansi-color-bright-green (:inherit ansi-color-green :weight 'bold))
  ;; (ansi-color-bright-yellow (:inherit ansi-color-yellow :weight 'bold))
  ;; (ansi-color-bright-blue (:inherit ansi-color-blue :weight 'bold))
  ;; (ansi-color-bright-magenta (:inherit ansi-color-magenta :weight 'bold))
  ;; (ansi-color-bright-cyan (:inherit ansi-color-cyan :weight 'bold))
  ;; (ansi-color-bright-white (:inherit ansi-color-white :weight 'bold))

  ;; ansi-term (built-in)
  ;; (term (:foreground nil :background nil :inherit default))
  ;; (term-color-black (:foreground ,term-black :background ,term-black))
  ;; (term-color-red (:foreground nohl-red :background nohl-red))
  ;; (term-color-green (:foreground nohl-green :background nohl-green))
  ;; (term-color-yellow (:foreground nohl-yellow :background nohl-yellow))
  ;; (term-color-blue (:foreground nohl-blue :background nohl-blue))
  ;; (term-color-magenta (:foreground nohl-purple :background nohl-purple))
  ;; (term-color-cyan (:foreground nohl-aqua :background nohl-aqua))
  ;; (term-color-white (:foreground ,term-white :background ,term-white))

  ;; antlr-mode (built-in)
  (antlr-keyword (:inherit font-lock-keyword-face))
  (antlr-syntax (:inherit 'font-lock-constant-face))
  (antlr-ruledef (:inherit 'font-lock-function-name-face))
  (antlr-ruleref (:inherit 'font-lock-type-face))
  (antlr-tokendef (:inherit 'font-lock-function-name-face))
  (antlr-tokenref (:inherit 'font-lock-type-face))
  (antlr-literal (:inherit 'font-lock-constant-face))

  ;; calendar (built-in)
  (diary (:foreground nohl-yellow))
  (holiday (:foreground nohl-bg :background nohl-orange))

  ;; Compilation (built-in)
  (compilation-column-number (:foreground nohl-yellow))
  (compilation-line-number (:foreground nohl-yellow))
  (compilation-message-face (:foreground nohl-blue))
  (compilation-mode-line-exit (:foreground nohl-green))
  (compilation-mode-line-fail (:foreground nohl-red))
  (compilation-mode-line-run (:foreground nohl-blue))

  ;; completion display (built-in)
  (completions-annotations (:foreground nohl-comment :slant 'italic))
  (completions-common-part (:foreground nohl-blue))
  (completions-first-difference (:foreground nohl-orange :weight 'bold))

  ;; custom (built-in)
  (custom-variable-tag (:foreground nohl-blue))
  (custom-group-tag (:foreground nohl-blue))
  (custom-state (:foreground nohl-green))

  ;; diff-mode (built-in)
  (diff-added (:foreground nohl-green :extend t))
  (diff-changed (:foreground nohl-blue))
  (diff-removed (:foreground nohl-orange :extend t))
  (diff-header (:foreground nohl-aqua :background nil :extend t))
  (diff-file-header (:foreground nohl-blue :background nil :extend t))
  (diff-hunk-header (:foreground nohl-purple))
  (diff-indicator-added (:inherit 'diff-added))
  (diff-indicator-changed (:inherit 'diff-changed))
  (diff-indicator-removed (:inherit 'diff-removed))
  (diff-refine-added (:foreground nohl-aqua))
  (diff-refine-changed (:foreground nohl-yellow))
  (diff-refine-removed (:foreground nohl-red))

  ;; ediff (built-in)
  (ediff-current-diff-A (:foreground nohl-comment :background nohl-highlight :extend t))
  (ediff-current-diff-Ancestor (:foreground nohl-aqua :background nohl-highlight))
  (ediff-current-diff-B (:foreground nohl-comment :background nohl-highlight :extend t))
  (ediff-current-diff-C (:foreground nohl-comment :background nohl-highlight :extend t))
  (ediff-even-diff-A (:foreground nohl-blue :background nohl-contrast-bg :extend t))
  (ediff-even-diff-Ancestor (:foreground nohl-purple :background nohl-highlight))
  (ediff-even-diff-B (:foreground nohl-blue :background nohl-contrast-bg :extend t))
  (ediff-even-diff-C (:foreground nohl-blue :background nohl-contrast-bg :extend t))
  (ediff-fine-diff-A (:foreground nohl-green :background nohl-contrast-bg))
  (ediff-fine-diff-Ancestor (:foreground nohl-yellow :background nohl-highlight))
  (ediff-fine-diff-B (:foreground nohl-green :background nohl-contrast-bg))
  (ediff-fine-diff-C (:foreground nohl-green :background nohl-contrast-bg))
  (ediff-odd-diff-A (:foreground nohl-orange :background nohl-contrast-bg :extend t))
  (ediff-odd-diff-Ancestor (:foreground nohl-red :background nohl-highlight))
  (ediff-odd-diff-B (:foreground nohl-orange :background nohl-contrast-bg :extend t))
  (ediff-odd-diff-C (:foreground nohl-orange :background nohl-contrast-bg :extend t))

  ;; ElDoc (built-in)
  (eldoc-highlight-function-argument (:foreground nohl-green :weight 'bold))

  ;; ERC (built-in)
  (erc-direct-msg-face (:foreground nohl-orange))
  (erc-error-face (:foreground nohl-red))
  (erc-header-face (:foreground nohl-fg :background nohl-highlight))
  (erc-input-face (:foreground nohl-green))
  (erc-keyword-face (:foreground nohl-yellow))
  (erc-current-nick-face (:foreground nohl-green))
  (erc-my-nick-face (:foreground nohl-green))
  (erc-nick-default-face (:weight 'normal :foreground nohl-purple))
  (erc-nick-msg-face (:weight 'normal :foreground nohl-yellow))
  (erc-notice-face (:foreground nohl-comment))
  (erc-pal-face (:foreground nohl-orange))
  (erc-prompt-face (:foreground nohl-blue))
  (erc-timestamp-face (:foreground nohl-aqua))
  (erc-keyword-face (:foreground nohl-green))

  ;; ERT (built-in)
  (ert-test-result-unexpected (:inherit 'error))
  (ert-test-result-expected (:inherit 'success))

  ;; eshell (built-in)
  (eshell-prompt (:foreground nohl-yellow :weight 'bold))
  (eshell-ls-archive (:foreground nohl-blue))
  (eshell-ls-backup (:foreground nohl-comment))
  (eshell-ls-clutter (:foreground nohl-orange :weight 'bold))
  (eshell-ls-directory :foreground nohl-blue :weight 'bold)
  (eshell-ls-executable (:foreground nohl-yellow :weight 'bold))
  (eshell-ls-missing (:foreground nohl-red :weight 'bold))
  (eshell-ls-product (:foreground nohl-green))
  (eshell-ls-readonly (:foreground nohl-red))
  (eshell-ls-special (:foreground nohl-purple :weight 'bold))
  (eshell-ls-symlink (:foreground nohl-aqua :weight 'bold))
  (eshell-ls-unreadable (:foreground nohl-comment))

  ;; Flycheck (built-in)
  (flycheck-error (:underline (:style 'wave :color nohl-red)))
  (flycheck-info (:underline (:style 'wave :color nohl-aqua)))
  (flycheck-warning (:underline (:style 'wave :color nohl-orange)))
  (flycheck-fringe-error (:foreground nohl-red))
  (flycheck-fringe-info (:foreground nohl-aqua))
  (flycheck-fringe-warning (:foreground nohl-orange))
  (flycheck-color-mode-line-error-face (:foreground nohl-red))
  (flycheck-color-mode-line-warning-face (:foreground nohl-orange))
  (flycheck-color-mode-line-info-face (:foreground nohl-aqua))
  (flycheck-color-mode-line-running-face (:foreground nohl-comment))
  (flycheck-color-mode-line-success-face (:foreground nohl-green))

  ;; Flymake (built-in)
  (flymake-error (:underline (:style 'wave :color nohl-red)))
  (flymake-note (:underline (:style 'wave :color nohl-aqua)))
  (flymake-warning (:underline (:style 'wave :color nohl-orange)))

  ;; Flyspell (built-in)
  (flyspell-incorrect (:underline (:style 'wave :color nohl-red)))

  ;; Gnus (built-in)
  (gnus-button (:inherit 'link :foreground nil))
  (gnus-emphasis-highlight-words (:foreground nohl-yellow :background nohl-highlight))
  (gnus-header-content (:inherit 'message-header-other))
  (gnus-header-from (:inherit 'message-header-other-face :weight 'bold :foreground nohl-orange))
  (gnus-header-name (:inherit 'message-header-name))
  (gnus-header-newsgroups (:foreground nohl-yellow :slant 'italic))
  (gnus-header-subject (:inherit 'message-header-subject))
  (gnus-x-face (:foreground nohl-bg :background nohl-fg))
  (gnus-signature (:inherit 'font-lock-comment-face))

  (mm-uu-extract (:foreground nohl-green :background nohl-highlight))

  (gnus-cite-1 (:foreground nohl-blue))
  (gnus-cite-2 (:foreground nohl-purple))
  (gnus-cite-3 (:foreground nohl-aqua))
  (gnus-cite-4 (:foreground nohl-yellow))
  (gnus-cite-5 (:foreground nohl-orange))
  (gnus-cite-6 (:foreground nohl-blue))
  (gnus-cite-7 (:foreground nohl-purple))
  (gnus-cite-8 (:foreground nohl-aqua))
  (gnus-cite-9 (:foreground nohl-red))
  (gnus-cite-10 (:foreground nohl-comment))
  (gnus-cite-11 (:foreground nohl-contrast-bg))

  (gnus-group-mail-1 (:foreground nohl-blue :weight 'normal))
  (gnus-group-mail-1-empty (:inherit 'gnus-group-mail-1 :foreground nohl-comment))
  (gnus-group-mail-2 (:foreground nohl-purple :weight 'normal))
  (gnus-group-mail-2-empty (:inherit 'gnus-group-mail-2 :foreground nohl-comment))
  (gnus-group-mail-3 (:foreground nohl-aqua :weight 'normal))
  (gnus-group-mail-3-empty (:inherit 'gnus-group-mail-3 :foreground nohl-comment))
  (gnus-group-mail-4 (:foreground nohl-yellow :weight 'normal))
  (gnus-group-mail-4-empty (:inherit 'gnus-group-mail-4 :foreground nohl-comment))
  (gnus-group-mail-5 (:foreground nohl-orange :weight 'normal))
  (gnus-group-mail-5-empty (:inherit 'gnus-group-mail-5 :foreground nohl-comment))
  (gnus-group-mail-6 (:foreground nohl-blue :weight 'normal))
  (gnus-group-mail-6-empty (:inherit 'gnus-group-mail-6 :foreground nohl-comment))
  (gnus-group-mail-low (:foreground nohl-comment))
  (gnus-group-mail-low-empty (:foreground nohl-comment))

  (gnus-group-news-1 (:foreground nohl-blue :weight 'normal))
  (gnus-group-news-1-empty (:inherit 'gnus-group-news-1 :foreground nohl-comment))
  (gnus-group-news-2 (:foreground nohl-purple :weight 'normal))
  (gnus-group-news-2-empty (:inherit 'gnus-group-news-2 :foreground nohl-comment))
  (gnus-group-news-3 (:foreground nohl-aqua :weight 'normal))
  (gnus-group-news-3-empty (:inherit 'gnus-group-news-3 :foreground nohl-comment))
  (gnus-group-news-4 (:foreground nohl-yellow :weight 'normal))
  (gnus-group-news-4-empty (:inherit 'gnus-group-news-4 :foreground nohl-comment))
  (gnus-group-news-5 (:foreground nohl-orange :weight 'normal))
  (gnus-group-news-5-empty (:inherit 'gnus-group-news-5 :foreground nohl-comment))
  (gnus-group-news-6 (:foreground nohl-blue :weight 'normal))
  (gnus-group-news-6-empty (:inherit 'gnus-group-news-6 :foreground nohl-comment))

  (gnus-server-agent (:foreground nohl-aqua :weight 'bold))
  (gnus-server-closed (:foreground nohl-comment :slant 'italic))
  (gnus-server-cloud (:foreground nohl-orange :weight 'bold))
  (gnus-server-denied (:foreground nohl-red :weight 'bold))
  (gnus-server-offline (:foreground nohl-blue :weight 'bold))
  (gnus-server-opened (:foreground nohl-green :weight 'bold))

  (gnus-splash (:foreground nohl-aqua))

  (gnus-summary-cancelled (:foreground nohl-red :background nil :weight 'normal))
  (gnus-summary-high-ancient (:foreground nohl-green :weight 'normal))
  (gnus-summary-high-read (:foreground nohl-green :weight 'normal))
  (gnus-summary-high-ticked (:foreground nohl-orange :weight 'normal))
  (gnus-summary-high-undownloaded (:foreground nohl-fg :weight 'bold))
  (gnus-summary-high-unread (:foreground nohl-yellow :weight 'normal))

  (gnus-summary-low-ancient (:foreground nohl-comment :weight 'normal))
  (gnus-summary-low-read (:foreground nohl-comment :weight 'normal))
  (gnus-summary-low-ticked (:foreground nohl-comment :slant 'italic))
  (gnus-summary-low-undownloaded (:foreground nohl-fg :slant 'italic))
  (gnus-summary-low-unread (:foreground nohl-comment :weight 'normal))

  (gnus-summary-normal-ancient (:foreground nohl-aqua :weight 'normal))
  (gnus-summary-normal-read (:foreground nohl-fg :weight 'normal))
  (gnus-summary-normal-ticked (:foreground nohl-orange :weight 'normal))
  (gnus-summary-normal-undownloaded (:foreground nohl-fg))
  (gnus-summary-normal-unread (:foreground nohl-blue :weight 'normal))

  ;; grep (built-in)
  (grep-context-face (:foreground nohl-comment))
  (grep-error-face (:foreground nohl-red :weight 'bold :underline t))
  (grep-hit-face (:foreground nohl-blue))
  (grep-match-face (:foreground nil :background nil :inherit 'match))

  ;; hi-lock (built-in)
  (hi-black-hb (:weight 'bold))
  (hi-blue (:foreground nohl-bg :background nohl-blue))
  (hi-blue-b (:foreground nohl-blue :weight 'bold))
  (hi-green (:foreground nohl-bg :background nohl-green))
  (hi-green-b (:foreground nohl-green :weight 'bold))
  (hi-pink (:foreground nohl-bg :background nohl-aqua))
  (hi-red-b (:foreground nohl-red :weight 'bold))
  (hi-yellow (:foreground nohl-bg :background nohl-yellow))

  ;; icomplete (built-in)
  (icomplete-first-match (:foreground nohl-green :weight 'bold))

  ;; IDO (built-in)
  (ido-subdir (:foreground nohl-purple))
  (ido-first-match (:foreground nohl-orange))
  (ido-only-match (:foreground nohl-green))
  (ido-indicator (:foreground nohl-red :background nohl-bg))
  (ido-virtual (:foreground nohl-comment))

  ;; info (built-in)
  (Info-quoted (:inherit 'font-lock-constant-face))
  (info-index-match (:inherit 'isearch))
  (info-menu-header (:foreground nohl-green :weight 'bold :height 1.4))
  (info-menu-star (:foreground nohl-yellow))
  (info-node (:foreground nohl-green :weight 'bold :slant 'italic))
  (info-title-1 (:weight 'bold :height 1.4))
  (info-title-2 (:weight 'bold :height 1.2))
  (info-title-3 (:weight 'bold :foreground nohl-orange))
  (info-title-4 (:weight 'bold :foreground nohl-purple))
  (info-xref-visited (:foreground nohl-comment :underline t))

  ;; j-mode
  (j-verb-face (:inherit 'font-lock-constant-face))
  (j-adverb-face (:inherit 'font-lock-function-name-face))
  (j-conjunction-face (:inherit 'font-lock-keyword-face))
  (j-other-face (:inherit 'font-lock-preprocessor-face))

  ;; kaocha-runner
  (kaocha-runner-error-face (:foreground nohl-red))
  (kaocha-runner-success-face (:foreground nohl-green))
  (kaocha-runner-warning-face (:foreground nohl-yellow))

  ;; Message-mode (built-in)
  (message-header-other (:foreground nil :background nil :weight 'normal))
  (message-header-subject (:inherit 'message-header-other :weight 'bold :foreground nohl-yellow))
  (message-header-to (:inherit 'message-header-other :weight 'bold :foreground nohl-orange))
  (message-header-cc (:inherit 'message-header-to :foreground nil))
  (message-header-name (:foreground nohl-blue :background nil))
  (message-header-newsgroups (:foreground nohl-aqua :background nil :slant 'normal))
  (message-separator (:foreground nohl-purple))

  ;; nim-mode
  (nim-font-lock-export-face (:inherit 'font-lock-function-name-face))
  (nim-font-lock-number-face (:inherit 'default))
  (nim-font-lock-pragma-face (:inherit 'font-lock-preprocessor-face))
  (nim-non-overloadable-face (:inherit 'font-lock-builtin-face))

  ;; nxml (built-in)
  (nxml-name-face (:foreground 'unspecified :inherit 'font-lock-constant-face))
  (nxml-attribute-local-name-face (:foreground 'unspecified :inherit 'font-lock-variable-name-face))
  (nxml-ref-face (:foreground 'unspecified :inherit 'font-lock-preprocessor-face))
  (nxml-delimiter-face (:foreground 'unspecified :inherit 'font-lock-keyword-face))
  (nxml-delimited-data-face (:foreground 'unspecified :inherit 'font-lock-string-face))
  (rng-error-face (:underline nohl-red))

  ;; orderless
  (orderless-match-face-0 (:foreground nohl-aqua))
  (orderless-match-face-1 (:foreground nohl-yellow))
  (orderless-match-face-2 (:foreground nohl-orange))
  (orderless-match-face-3 (:foreground nohl-blue))

  ;; org-mode (built-in)
  (org-agenda-structure (:foreground nohl-purple))
  (org-agenda-current-time (:foreground nohl-yellow))
  (org-agenda-date (:foreground nohl-blue :underline nil))
  (org-agenda-done (:foreground nohl-green))
  (org-agenda-dimmed-todo-face (:foreground nohl-comment))
  (org-block (:background nohl-low-contrast-bg))
  (org-block-begin-line (:background nohl-bg :foreground nohl-comment :slant 'italic))
  (org-block-end-line (:background nohl-bg :foreground nohl-comment :slant 'italic))
  (org-code (:foreground nohl-yellow))
  (org-column (:background nohl-contrast-bg))
  (org-column-title (:inherit 'org-column :weight 'bold :underline t))
  (org-date (:foreground nohl-blue :underline t))
  (org-date-selected (:foreground nohl-aqua :inverse-video t))
  (org-document-info (:foreground nohl-aqua))
  (org-document-info-keyword (:foreground nohl-green))
  (org-document-title (:weight 'bold :foreground nohl-orange :height 1.4))
  (org-done (:foreground nohl-green))
  (org-ellipsis (:foreground nohl-comment))
  (org-footnote (:foreground nohl-aqua))
  (org-formula (:foreground nohl-red))
  (org-hide (:foreground nohl-bg :background nohl-bg))
  (org-habit-alert-face (:foreground nohl-bg :background nohl-yellow))
  (org-habit-alert-future-face (:foreground nohl-bg :background nohl-orange))
  (org-habit-clear-face (:foreground nohl-bg :background nohl-comment))
  (org-habit-clear-future-face (:foreground nohl-bg :background nohl-purple))
  (org-habit-overdue-face (:foreground nohl-bg :background nohl-blue))
  (org-habit-overdue-future-face (:foreground nohl-bg :background nohl-red))
  (org-habit-ready-face (:foreground nohl-bg :background nohl-aqua))
  (org-habit-ready-future-face (:foreground nohl-bg :background nohl-green))
  (org-headline-done (:foreground nil :strike-through t))
  (org-headline-todo (:foreground nohl-orange))
  (org-link (:foreground nohl-blue :underline t))
  (org-mode-line-clock-overrun (:inherit 'mode-line :background nohl-red))
  (org-scheduled (:foreground nohl-green))
  (org-scheduled-previously (:foreground nohl-aqua))
  (org-scheduled-today (:foreground nohl-green))
  (org-special-keyword (:foreground nohl-orange))
  (org-table (:foreground nohl-purple))
  (org-time-grid (:foreground nohl-yellow))
  (org-todo (:foreground nohl-red))
  (org-upcoming-deadline (:foreground nohl-orange))
  (org-warning (:weight 'bold :foreground nohl-red))

  ;; Outline (built-in)
  (outline-1 (:inherit nil :foreground nohl-blue))
  (outline-2 (:inherit nil :foreground nohl-purple))
  (outline-3 (:inherit nil :foreground nohl-aqua))
  (outline-4 (:inherit nil :foreground nohl-yellow))
  (outline-5 (:inherit nil :foreground nohl-orange))
  (outline-6 (:inherit nil :foreground nohl-blue))
  (outline-7 (:inherit nil :foreground nohl-purple))
  (outline-8 (:inherit nil :foreground nohl-aqua))
  (outline-9 (:inherit nil :foreground nohl-yellow))

  ;; outline-minor-faces
  (outline-minor-0 (:weight 'bold :background nohl-low-contrast-bg))
  (outline-minor-1 (:inherit ('outline-minor-0 'outline-1)))

  ;; Parenthesis matching (built-in)
  (show-paren-match (:background nohl-purple :foreground nohl-bg))
  (show-paren-mismatch (:background nohl-red :foreground nohl-bg))

  ;; rcirc (built-in)
  (rcirc-bright-nick (:foreground nohl-yellow))
  (rcirc-dim-nick (:foreground nohl-comment))
  (rcirc-keyword (:foreground nohl-green))
  (rcirc-my-nick (:foreground nohl-green))
  (rcirc-nick-in-message (:foreground nohl-yellow))
  (rcirc-nick-in-message-full-line (:foreground nohl-orange))
  (rcirc-other-nick (:foreground nohl-purple))
  (rcirc-prompt (:foreground nohl-blue))
  (rcirc-server (:foreground nohl-green))
  (rcirc-timestamp (:foreground nohl-aqua))

  ;; re-builder (built-in)
  (reb-match-0 (:foreground nohl-bg :background nohl-aqua))
  (reb-match-1 (:foreground nohl-bg :background nohl-yellow))
  (reb-match-2 (:foreground nohl-bg :background nohl-orange))
  (reb-match-3 (:foreground nohl-bg :background nohl-blue))

  ;; ruler-mode (built-in)
  (ruler-mode-column-number (:foreground nohl-fg :background nohl-highlight))
  (ruler-mode-comment-column (:foreground nohl-comment :background nohl-contrast-bg))
  (ruler-mode-current-column (:foreground nohl-yellow :background nohl-contrast-bg :weight 'bold))
  (ruler-mode-default (:foreground nohl-comment :background nohl-highlight))
  (ruler-mode-fill-column (:foreground nohl-red :background nohl-contrast-bg))
  (ruler-mode-fringes (:foreground nohl-green :background nohl-contrast-bg))
  (ruler-mode-goal-column (:foreground nohl-red :background nohl-contrast-bg))
  (ruler-mode-margins (:foreground nohl-orange :background nohl-contrast-bg))
  (ruler-mode-pad (:foreground nohl-bg :background nohl-comment))
  (ruler-mode-tab-stop (:foreground nohl-blue :background nohl-contrast-bg))

  ;; sh-script (built-in)
  (sh-heredoc (:foreground nil :inherit 'font-lock-string-face :weight 'normal))
  (sh-quoted-exec (:foreground nil :inherit 'font-lock-preprocessor-face))

  ;; Speedbar (built-in)
  (speedbar-button-face (:foreground nohl-green))
  (speedbar-directory-face (:foreground nohl-orange))
  (speedbar-file-face (:foreground nohl-aqua))
  (speedbar-highlight-face (:inherit 'highlight))
  (speedbar-selected-face (:foreground nohl-red :underline t))
  (speedbar-separator-face (:foreground nohl-bg :background nohl-blue :overline nohl-bg))
  (speedbar-tag-face (:foreground nohl-yellow))
  (vhdl-speedbar-architecture-face (:foreground nohl-blue))
  (vhdl-speedbar-architecture-selected-face (:foreground nohl-blue :underline t))
  (vhdl-speedbar-configuration-face (:foreground nohl-green))
  (vhdl-speedbar-configuration-selected-face (:foreground nohl-green :underline t))
  (vhdl-speedbar-entity-face (:foreground nohl-orange))
  (vhdl-speedbar-entity-selected-face (:foreground nohl-orange :underline t))
  (vhdl-speedbar-instantiation-face (:foreground nohl-yellow))
  (vhdl-speedbar-instantiation-selected-face (:foreground nohl-yellow :underline t))
  (vhdl-speedbar-library-face (:foreground nohl-purple))
  (vhdl-speedbar-package-face (:foreground nohl-aqua))
  (vhdl-speedbar-package-selected-face (:foreground nohl-aqua :underline t))
  (vhdl-speedbar-subprogram-face (:foreground nohl-green))

  ;; tab-bar (built-in)
  (tab-bar (:height 1.2 :foreground nohl-comment :background nohl-highlight))
  (tab-bar-tab (:background nohl-contrast-bg
                            :foreground nohl-purple
                            :inverse-video nil
                            :box (:line-width 1 :style 'released-button)))
  (tab-bar-tab-inactive (:inherit 'tab-bar-tab
                                  :background nohl-comment
                                  :foreground nohl-highlight
                                  :inverse-video t))

  ;; tab-line (built-in)
  (tab-line (:foreground nohl-comment :background nohl-highlight))
  (tab-line-close-highlight (:foreground nohl-red))
  (tab-line-tab (:background nohl-contrast-bg
                             :foreground nohl-purple
                             :inverse-video nil
                             :box (:line-width 1 :style 'released-button)))
  (tab-line-tab-inactive (:inherit 'tab-line-tab
                                   :background nohl-comment
                                   :foreground nohl-highlight
                                   :inverse-video t))

  ;; which-function (built-in)
  (which-func (:foreground nohl-blue :background nil :weight 'bold))

  ;; whitespace (built-in)
  (whitespace-big-indent (:background nohl-red :foreground nohl-contrast-bg))
  (whitespace-empty (:background nohl-yellow :foreground nohl-orange))
  (whitespace-hspace (:background nohl-contrast-bg :foreground nohl-comment))
  (whitespace-indentation (:background nohl-contrast-bg :foreground nohl-comment))
  (whitespace-line (:background nohl-contrast-bg :foreground nohl-orange))
  (whitespace-newline (:background nohl-contrast-bg :foreground nohl-comment))
  (whitespace-space (:background nohl-contrast-bg :foreground nohl-comment))
  (whitespace-space-after-tab (:background nohl-contrast-bg :foreground nohl-yellow))
  (whitespace-space-before-tab (:background nohl-contrast-bg :foreground nohl-orange))
  (whitespace-tab (:background nohl-contrast-bg :foreground nohl-comment))
  (whitespace-trailing (:background nohl-orange :foreground nohl-contrast-bg))
  (trailing-whitespace (:inherit 'whitespace-trailing))

  ;; window-divider (built-in)
  (window-divider (:foreground nohl-comment))
  (window-divider-first-pixel (:foreground nohl-contrast-bg))
  (window-divider-last-pixel (:foreground nohl-contrast-bg))

  ;; ace-window
  (aw-background-face (:foreground nohl-contrast-bg))
  (aw-leading-char-face (:foreground nohl-yellow))

  ;; Anzu
  (anzu-mode-line (:foreground nohl-orange))
  (anzu-mode-line-no-match (:foreground nohl-red))
  (anzu-replace-highlight (:inherit 'lazy-highlight))
  (anzu-replace-to (:inherit 'isearch))
  (anzu-match-1 (:foreground nohl-yellow ))
  (anzu-match-2 (:foreground nohl-orange))
  (anzu-match-3 (:foreground nohl-blue))

  ;; auctex
  (font-latex-bold-face (:foreground nohl-green :weight 'bold))
  (font-latex-doctex-documentation-face (:inherit 'highlight))
  (font-latex-italic-face (:foreground nohl-green :slant 'italic))
  (font-latex-math-face (:foreground nohl-purple))
  (font-latex-script-char-face (:foreground nohl-red))
  (font-latex-sectioning-0-face (:foreground nohl-yellow :weight 'bold :height 1.2))
  (font-latex-sectioning-1-face (:foreground nohl-yellow :weight 'bold :height 1.2))
  (font-latex-sectioning-2-face (:foreground nohl-yellow :weight 'bold :height 1.2))
  (font-latex-sectioning-3-face (:foreground nohl-yellow :weight 'bold :height 1.2))
  (font-latex-sectioning-4-face (:foreground nohl-yellow :weight 'bold :height 1.2))
  (font-latex-sectioning-5-face (:foreground nohl-yellow :weight 'bold))
  (font-latex-sedate-face (:foreground nohl-orange))
  (font-latex-slide-title-face (:foreground nohl-blue :weight 'bold :height 1.2))
  (font-latex-string-face (:inherit 'font-lock-string-face))
  (font-latex-verbatim-face (:inherit 'font-lock-string-face))
  (font-latex-warning-face (:inherit 'warning))
  ;; TeX-fold
  (TeX-fold-folded-face (:foreground nohl-purple))
  (TeX-fold-unfolded-face (:inherit 'highlight))

  ;; avy
  (avy-background-face (:foreground nohl-contrast-bg))
  (avy-lead-face (:foreground nohl-bg :background nohl-yellow))
  (avy-lead-face-0 (:foreground nohl-bg :background nohl-blue))
  (avy-lead-face-1 (:foreground nohl-bg :background nohl-aqua))
  (avy-lead-face-2 (:foreground nohl-bg :background nohl-orange))

  ;; bm
  (bm-face (:background nohl-contrast-bg :foreground nohl-fg :extend t))
  (bm-persistent-face (:background nohl-blue :foreground nohl-bg :extend t))

  ;; bookmark+
  (bmkp-*-mark (:foreground nohl-bg :background nohl-yellow))
  (bmkp->-mark (:foreground nohl-yellow))
  (bmkp-D-mark (:foreground nohl-bg :background nohl-red))
  (bmkp-X-mark (:foreground nohl-red))
  (bmkp-a-mark (:background nohl-red))
  (bmkp-bad-bookmark (:foreground nohl-bg :background nohl-yellow))
  (bmkp-bookmark-file (:foreground nohl-purple :background nohl-contrast-bg))
  (bmkp-bookmark-list (:background nohl-contrast-bg))
  (bmkp-buffer (:foreground nohl-blue))
  (bmkp-desktop (:foreground nohl-bg :background nohl-purple))
  (bmkp-file-handler (:background nohl-red))
  (bmkp-function (:foreground nohl-green))
  (bmkp-gnus (:foreground nohl-orange))
  (bmkp-heading (:foreground nohl-yellow))
  (bmkp-info (:foreground nohl-aqua))
  (bmkp-light-autonamed (:foreground nohl-aqua :background nohl-highlight))
  (bmkp-light-autonamed-region (:foreground nohl-red :background nohl-highlight))
  (bmkp-light-fringe-autonamed (:foreground nohl-contrast-bg :background nohl-purple))
  (bmkp-light-fringe-non-autonamed (:foreground nohl-contrast-bg :background nohl-green))
  (bmkp-light-mark (:foreground nohl-bg :background nohl-aqua))
  (bmkp-light-non-autonamed (:foreground nohl-purple :background nohl-highlight))
  (bmkp-light-non-autonamed-region (:foreground nohl-orange :background nohl-highlight))
  (bmkp-local-directory (:foreground nohl-bg :background nohl-purple))
  (bmkp-local-file-with-region (:foreground nohl-yellow))
  (bmkp-local-file-without-region (:foreground nohl-comment))
  (bmkp-man (:foreground nohl-purple))
  (bmkp-no-jump (:foreground nohl-comment))
  (bmkp-no-local (:foreground nohl-yellow))
  (bmkp-non-file (:foreground nohl-green))
  (bmkp-remote-file (:foreground nohl-orange))
  (bmkp-sequence (:foreground nohl-blue))
  (bmkp-su-or-sudo (:foreground nohl-red))
  (bmkp-t-mark (:foreground nohl-purple))
  (bmkp-url (:foreground nohl-blue :underline t))
  (bmkp-variable-list (:foreground nohl-green))

  ;; Caml
  (caml-types-def-face (:inherit 'highlight :box (:color nohl-blue :line-width -1)))
  (caml-types-occ-face (:inherit 'highlight :box (:color nohl-yellow :line-width -1)))
  (caml-types-expr-face (:inherit 'highlight :box (:color nohl-aqua :line-width -1)))
  (caml-types-scope-face (:inherit 'highlight :box (:color nohl-green :line-width -1)))
  (caml-types-typed-face (:inherit 'highlight :box (:color nohl-purple :line-width -1)))

  ;; CIDER
  (cider-debug-code-overlay-face (:background nohl-contrast-bg))
  (cider-deprecated-face (:foreground nohl-contrast-bg :background nohl-yellow))
  (cider-enlightened-face (:inherit 'cider-result-overlay-face :box (:color nohl-orange :line-width -1)))
  (cider-enlightened-local-face (:weight 'bold :foreground nohl-orange))
  (cider-error-highlight-face (:underline (:style 'wave :color nohl-red) :inherit ''unspecified))
  (cider-fringe-good-face (:foreground nohl-green))
  (cider-instrumented-face (:box (:color nohl-red :line-width -1)))
  (cider-result-overlay-face (:background nohl-contrast-bg :box (:line-width -1 :color nohl-yellow)))
  (cider-test-error-face (:foreground nohl-contrast-bg :background nohl-orange))
  (cider-test-failure-face (:foreground nohl-contrast-bg :background nohl-red))
  (cider-test-success-face (:foreground nohl-contrast-bg :background nohl-green))
  (cider-traced-face (:box nohl-aqua :line-width -1))
  (cider-warning-highlight-face (:underline (:style 'wave :color nohl-yellow) :inherit ''unspecified))

  ;; Circe
  (circe-fool-face (:foreground nohl-comment))
  (circe-highlight-nick-face (:foreground nohl-orange))
  (circe-my-message-face (:foreground nohl-green))
  (circe-prompt-face (:foreground nohl-blue))
  (circe-server-face (:foreground nohl-green))
  (circe-topic-diff-new-face (:foreground nohl-blue))
  (circe-topic-diff-removed-face (:foreground nohl-red))

  ;; For Brian Carper's extended clojure syntax table
  (clojure-keyword (:foreground nohl-yellow))
  (clojure-parens (:foreground nohl-fg))
  (clojure-braces (:foreground nohl-green))
  (clojure-brackets (:foreground nohl-yellow))
  (clojure-double-quote (:foreground nohl-aqua :background nil))
  (clojure-special (:foreground nohl-blue))
  (clojure-java-call (:foreground nohl-purple))

  ;; Clojure errors
  (clojure-test-failure-face (:background nil :inherit 'flymake-warnline))
  (clojure-test-error-face (:background nil :inherit 'flymake-errline))
  (clojure-test-success-face (:background nil :foreground nil :underline nohl-green))

  ;; coffee-mode
  (coffee-mode-class-name (:foreground nohl-orange :weight 'bold))
  (coffee-mode-function-param (:foreground nohl-purple))

  ;; company
  (company-preview (:foreground nohl-comment :background nohl-contrast-bg))
  (company-preview-common (:inherit 'company-preview :foreground nohl-red))
  (company-preview-search (:inherit 'company-preview :foreground nohl-blue))
  (company-tooltip (:background nohl-contrast-bg))
  (company-tooltip-selection (:foreground nohl-comment :inverse-video t))
  (company-tooltip-common (:inherit 'company-tooltip :foreground nohl-red))
  (company-tooltip-common-selection (:inherit 'company-tooltip-selection :foreground nohl-red))
  (company-tooltip-search (:inherit 'company-tooltip :foreground nohl-blue))
  (company-tooltip-annotation (:inherit 'company-tooltip :foreground nohl-green))
  (company-tooltip-annotation-selection (:inherit 'company-tooltip-selection :foreground nohl-green))
  (company-scrollbar-bg (:inherit 'company-tooltip :background nohl-highlight))
  (company-scrollbar-fg (:background nohl-contrast-bg))
  (company-echo-common (:inherit 'company-echo :foreground nohl-red))

  ;; counsel-css
  (counsel-css-selector-depth-face-1 (:foreground nohl-yellow))
  (counsel-css-selector-depth-face-2 (:foreground nohl-orange))
  (counsel-css-selector-depth-face-3 (:foreground nohl-green))
  (counsel-css-selector-depth-face-4 (:foreground nohl-aqua))
  (counsel-css-selector-depth-face-5 (:foreground nohl-blue))
  (counsel-css-selector-depth-face-6 (:foreground nohl-purple))

  ;; csv-mode
  (csv-separator-face (:foreground nohl-orange))

  ;; debbugs
  (debbugs-gnu-done (:foreground nohl-comment))
  (debbugs-gnu-forwarded (:foreground nohl-yellow))
  (debbugs-gnu-handled (:foreground nohl-green))
  (debbugs-gnu-new (:foreground nohl-red))
  (debbugs-gnu-pending (:foreground nohl-blue))
  (debbugs-gnu-stale-1 (:foreground nohl-orange))
  (debbugs-gnu-stale-2 (:foreground nohl-green))
  (debbugs-gnu-stale-3 (:foreground nohl-purple))
  (debbugs-gnu-stale-4 (:foreground nohl-aqua))
  (debbugs-gnu-stale-5 (:foreground nohl-fg))
  (debbugs-gnu-tagged (:foreground nohl-red))

  ;; define-it
  (define-it-headline-face (:foreground nohl-blue :bold t))
  (define-it-pop-tip-color (:foreground nohl-comment :background nohl-contrast-bg))
  (define-it-sense-number-face (:foreground nohl-purple :bold t))
  (define-it-type-face (:foreground nohl-aqua))
  (define-it-var-face (:foreground nohl-orange :bold t))

  ;; diff-hl
  (diff-hl-insert (:foreground nohl-bg :background nohl-green))
  (diff-hl-change (:foreground nohl-bg :background nohl-blue))
  (diff-hl-delete (:foreground nohl-bg :background nohl-red))

  ;; dired-async
  (dired-async-failures (:inherit 'error))
  (dired-async-message (:inherit 'success))
  (dired-async-mode-message (:inherit 'warning))

  ;; diredfl
  (diredfl-compressed-file-suffix (:foreground nohl-blue))
  (diredfl-compressed-file-name (:foreground nohl-blue))
  (diredfl-deletion (:inherit 'error :inverse-video t))
  (diredfl-deletion-file-name (:inherit 'error))
  (diredfl-date-time (:foreground nohl-blue))
  (diredfl-dir-heading (:foreground nohl-green :weight 'bold))
  (diredfl-dir-name (:foreground nohl-aqua))
  (diredfl-dir-priv (:foreground nohl-aqua :background nil))
  (diredfl-exec-priv (:foreground nohl-orange :background nil))
  (diredfl-executable-tag (:foreground nohl-red :background nil))
  (diredfl-file-name (:foreground nohl-yellow))
  (diredfl-file-suffix (:foreground nohl-green))
  (diredfl-flag-mark (:foreground nohl-green :inverse-video t))
  (diredfl-flag-mark-line (:background nil :inherit 'highlight))
  (diredfl-ignored-file-name (:foreground nohl-comment))
  (diredfl-link-priv (:background nil :foreground nohl-purple))
  (diredfl-mode-line-flagged (:foreground nohl-red))
  (diredfl-mode-line-marked (:foreground nohl-green))
  (diredfl-no-priv (:background nil))
  (diredfl-number (:foreground nohl-yellow))
  (diredfl-other-priv (:background nil :foreground nohl-purple))
  (diredfl-rare-priv (:foreground nohl-red :background nil))
  (diredfl-read-priv (:foreground nohl-green :background nil))
  (diredfl-symlink (:foreground nohl-purple))
  (diredfl-write-priv (:foreground nohl-yellow :background nil))

  ;; dired+
  (diredp-compressed-file-suffix (:inherit 'diredfl-compressed-file-suffix))
  (diredp-compressed-file-name (:inherit 'diredfl-compressed-file-name))
  (diredp-deletion (:inherit 'diredfl-deletion))
  (diredp-deletion-file-name (:inherit 'diredfl-deletion-file-name))
  (diredp-date-time (:inherit 'diredfl-date-time))
  (diredp-dir-heading (:inherit 'diredfl-dir-heading))
  (diredp-dir-name (:inherit 'diredfl-dir-name))
  (diredp-dir-priv (:inherit 'diredfl-dir-priv))
  (diredp-exec-priv (:inherit 'diredfl-exec-priv))
  (diredp-executable-tag (:inherit 'diredfl-executable-tag))
  (diredp-file-name (:inherit 'diredfl-file-name))
  (diredp-file-suffix (:inherit 'diredfl-file-suffix))
  (diredp-flag-mark (:inherit 'diredfl-flag-mark))
  (diredp-flag-mark-line (:inherit 'diredfl-flag-mark-line))
  (diredp-ignored-file-name (:inherit 'diredfl-ignored-file-name))
  (diredp-link-priv (:inherit 'diredfl-link-priv))
  (diredp-mode-line-flagged (:inherit 'diredfl-mode-line-flagged))
  (diredp-mode-line-marked (:inherit 'diredfl-mode-line-marked))
  (diredp-no-priv (:inherit 'diredfl-no-priv))
  (diredp-number (:inherit 'diredfl-number))
  (diredp-other-priv (:inherit 'diredfl-other-priv))
  (diredp-rare-priv (:inherit 'diredfl-rare-priv))
  (diredp-read-priv (:inherit 'diredfl-read-priv))
  (diredp-symlink (:inherit 'diredfl-symlink))
  (diredp-write-priv (:inherit 'diredfl-write-priv))

  ;; dired-narrow
  (dired-narrow-blink (:foreground nohl-bg :background nohl-yellow))

  ;; e2wm
  (e2wm:face-history-list-normal (:foreground nohl-fg :background nohl-bg))
  (e2wm:face-history-list-select1 (:foreground nohl-aqua :background nohl-bg))
  (e2wm:face-history-list-select2 (:foreground nohl-yellow :background nohl-bg))

  ;; EDTS errors
  (edts-face-warning-line (:background nil :inherit 'flymake-warnline))
  (edts-face-warning-mode-line (:background nil :foreground nohl-orange :weight 'bold))
  (edts-face-error-line (:background nil :inherit 'flymake-errline))
  (edts-face-error-mode-line (:background nil :foreground nohl-red :weight 'bold))

  ;; Elfeed
  (elfeed-log-debug-level-face (:foreground nohl-comment))
  (elfeed-log-error-level-face (:inherit 'error))
  (elfeed-log-info-level-face (:inherit 'success))
  (elfeed-log-warn-level-face (:inherit 'warning))
  (elfeed-search-date-face (:foreground nohl-blue))
  (elfeed-search-feed-face (:foreground nohl-yellow))
  (elfeed-search-tag-face (:foreground nohl-comment))
  (elfeed-search-title-face (:foreground nohl-comment))
  (elfeed-search-unread-count-face (:foreground nohl-yellow))
  (elfeed-search-unread-title-face (:foreground nohl-fg :weight 'bold))

  ;; EMMS
  (emms-browser-artist-face (:foreground nohl-purple))
  (emms-browser-album-face (:foreground nohl-aqua))
  (emms-browser-track-face (:foreground nohl-yellow))
  (emms-browser-year/genre-face (:foreground nohl-blue))
  (emms-playlist-selected-face (:inverse-video t))
  (emms-playlist-track-face (:foreground nohl-yellow))

  ;; eyebrowse
  (eyebrowse-mode-line-active (:foreground nohl-orange :weight 'bold))
  (eyebrowse-mode-line-delimiters (:foreground nohl-purple))
  (eyebrowse-mode-line-inactive (:foreground nohl-comment))
  (eyebrowse-mode-line-separator (:foreground nohl-purple))

  ;; flx-ido
  (flx-highlight-face (:inherit nil :foreground nohl-yellow :weight 'bold :underline nil))

  ;; fold-this
  (fold-this-overlay (:foreground nohl-green))

  ;; git-gutter (git-gutter-fringe inherits from git-gutter)
  (git-gutter:separator (:foreground nohl-aqua :weight 'bold))
  (git-gutter:modified (:foreground nohl-purple :weight 'bold))
  (git-gutter:added (:foreground nohl-green :weight 'bold))
  (git-gutter:deleted (:foreground nohl-red :weight 'bold))
  (git-gutter:unchanged (:background nohl-yellow))

  ;; git-gutter+ (git-gutter-fringe+ inherits from git-gutter+)
  (git-gutter+-separator (:foreground nohl-aqua :weight 'bold))
  (git-gutter+-modified (:foreground nohl-purple :weight 'bold))
  (git-gutter+-added (:foreground nohl-green :weight 'bold))
  (git-gutter+-deleted (:foreground nohl-red :weight 'bold))
  (git-gutter+-unchanged (:background nohl-yellow))

  ;; git-timemachine
  (git-timemachine-minibuffer-author-face (:foreground nohl-purple))
  (git-timemachine-minibuffer-detail-face (:foreground nohl-green))

  ;; guide-key
  (guide-key/prefix-command-face (:foreground nohl-blue))
  (guide-key/highlight-command-face (:foreground nohl-green))
  (guide-key/key-face (:foreground nohl-comment))

  ;; helm
  (helm-M-x-key (:foreground nohl-orange :underline t))
  (helm-bookmark-addressbook (:foreground nohl-red))
  (helm-bookmark-file (:foreground nohl-aqua))
  (helm-bookmark-file-not-found (:foreground nohl-bg))
  (helm-bookmark-gnus (:foreground nohl-purple))
  (helm-bookmark-info (:foreground nohl-green))
  (helm-bookmark-man (:foreground nohl-orange))
  (helm-bookmark-w3m (:foreground nohl-yellow))
  (helm-buffer-archive (:foreground nohl-yellow))
  (helm-buffer-directory (:foreground nohl-blue))
  (helm-buffer-not-saved (:foreground nohl-orange))
  (helm-buffer-process (:foreground nohl-aqua))
  (helm-buffer-saved-out (:inherit 'warning))
  (helm-buffer-size (:foreground nohl-yellow))
  (helm-candidate-number (:foreground nohl-green))
  (helm-comint-prompts-buffer-name (:foreground nohl-green))
  (helm-comint-prompts-promptidx (:foreground nohl-aqua))
  (helm-delete-async-message (:foreground nohl-yellow))
  (helm-eshell-prompts-buffer-name (:foreground nohl-green))
  (helm-eshell-prompts-promptidx (:foreground nohl-aqua))
  (helm-etags-file (:foreground nohl-yellow :underline t))
  (helm-ff-denied (:foreground nohl-bg :background nohl-red))
  (helm-ff-directory (:foreground nohl-aqua))
  (helm-ff-dotted-directory (:foreground nohl-comment))
  (helm-ff-dotted-symlink-directory (:foreground nohl-comment))
  (helm-ff-executable (:foreground nohl-green))
  (helm-ff-invalid-symlink (:foreground nohl-bg :background nohl-red))
  (helm-ff-pipe (:foreground nohl-yellow :background nohl-bg))
  (helm-ff-prefix (:foreground nohl-bg :background nohl-yellow))
  (helm-ff-socket (:foreground nohl-purple))
  (helm-ff-suid (:foreground nohl-bg :background nohl-red))
  (helm-grep-file (:foreground nohl-purple :underline t))
  (helm-grep-finish (:foreground nohl-green))
  (helm-grep-lineno (:foreground nohl-orange))
  (helm-grep-match (:inherit 'match))
  (helm-header-line-left-margin (:foreground nohl-bg :background nohl-yellow))
  (helm-lisp-completion-info (:foreground nohl-red))
  (helm-lisp-show-completion (:background nohl-contrast-bg))
  (helm-locate-finish (:foreground nohl-green))
  (helm-match (:inherit 'match))
  (helm-moccur-buffer (:foreground nohl-aqua :underline t))
  (helm-mode-prefix (:foreground nohl-bg :background nohl-red))
  (helm-prefarg (:foreground nohl-red))
  (helm-resume-need-update (:background nohl-red))
  (helm-selection (:inherit 'highlight :extend t))
  (helm-selection-line (:inherit 'highlight :extend t))
  (helm-separator (:foreground nohl-purple))
  (helm-source-header (:weight 'bold :foreground nohl-orange))
  (helm-time-zone-current (:foreground nohl-green))
  (helm-time-zone-home (:foreground nohl-red))
  (helm-ucs-char (:foreground nohl-yellow))
  (helm-visible-mark (:foreground nohl-blue))

  ;; helm-ls-git
  (helm-ls-git-added-copied-face (:foreground nohl-green))
  (helm-ls-git-added-modified-face (:foreground nohl-yellow))
  (helm-ls-git-conflict-face (:foreground nohl-red))
  (helm-ls-git-deleted-and-staged-face (:foreground nohl-purple))
  (helm-ls-git-deleted-not-staged-face (:foreground nohl-comment))
  (helm-ls-git-modified-and-staged-face (:foreground nohl-green))
  (helm-ls-git-modified-not-staged-face (:foreground nohl-yellow))
  (helm-ls-git-renamed-modified-face (:foreground nohl-blue))
  (helm-ls-git-untracked-face (:foreground nohl-aqua))

  ;; helm-rg
  (helm-rg-active-arg-face (:foreground nohl-green))
  (helm-rg-base-rg-cmd-face (:foreground nohl-fg))
  (helm-rg-colon-separator-ripgrep-output-face (:foreground nohl-fg))
  (helm-rg-directory-cmd-face (:foreground nohl-orange))
  (helm-rg-directory-header-face (:foreground nohl-fg :extend t))
  (helm-rg-error-message (:foreground nohl-red))
  (helm-rg-extra-arg-face (:foreground nohl-yellow))
  (helm-rg-file-match-face (:foreground nohl-aqua :underline t))
  (helm-rg-inactive-arg-face (:foreground nohl-comment))
  (helm-rg-line-number-match-face (:foreground nohl-orange :underline t))
  (helm-rg-match-text-face (:foreground nohl-bg :background nohl-blue))
  (helm-rg-preview-line-highlight (:foreground nohl-green))
  (helm-rg-title-face (:foreground nohl-purple))

  ;; helm-switch-shell
  (helm-switch-shell-new-shell-face (:foreground nohl-bg :background nohl-purple))

  ;; hl-sexp
  (hl-sexp-face (:background nohl-contrast-bg))

  ;; highlight-80+
  (highlight-80+ (:background nohl-contrast-bg))

  ;; highlight-symbol
  (highlight-symbol-face (:inherit 'highlight))

  ;; Hydra
  (hydra-face-blue (:foreground nohl-blue))
  (hydra-face-teal (:foreground nohl-aqua))
  (hydra-face-pink (:foreground nohl-purple))
  (hydra-face-red (:foreground nohl-red))
  ;; this is unfortunate, but we have no color close to amaranth in
  ;; our palette
  (hydra-face-amaranth (:foreground nohl-orange))

  ;; info+
  (info-command-ref-item (:foreground nohl-green :background nohl-highlight))
  (info-constant-ref-item (:foreground nohl-purple :background nohl-highlight))
  (info-double-quoted-name (:inherit 'font-lock-comment-face))
  (info-file (:foreground nohl-yellow :background nohl-highlight))
  (info-function-ref-item (:inherit 'font-lock-function-name-face :background nohl-highlight))
  (info-macro-ref-item (:foreground nohl-orange :background nohl-highlight))
  (info-menu (:foreground nohl-green))
  (info-quoted-name (:inherit 'font-lock-constant-face))
  (info-reference-item (:background nohl-highlight))
  (info-single-quote (:inherit 'font-lock-keyword-face))
  (info-special-form-ref-item (:foreground nohl-orange :background nohl-highlight))
  (info-string (:inherit 'font-lock-string-face))
  (info-syntax-class-item (:foreground nohl-blue :background nohl-highlight))
  (info-user-option-ref-item (:foreground nohl-red :background nohl-highlight))
  (info-variable-ref-item (:inherit 'font-lock-variable-name-face :background nohl-highlight))
  (info-xref-bookmarked (:foreground nohl-purple))

  ;; Ivy
  (ivy-action (:foreground nohl-purple))
  (ivy-confirm-face (:foreground nohl-green))
  (ivy-current-match (:background nohl-contrast-bg))
  (ivy-cursor (:background nohl-contrast-bg))
  (ivy-match-required-face (:foreground nohl-red :background nohl-bg))
  (ivy-remote (:foreground nohl-orange))
  (ivy-subdir (:foreground nohl-purple))
  (ivy-virtual (:foreground nohl-comment))
  (ivy-minibuffer-match-face-1 (:foreground nohl-aqua))
  (ivy-minibuffer-match-face-2 (:foreground nohl-yellow))
  (ivy-minibuffer-match-face-3 (:foreground nohl-blue))
  (ivy-minibuffer-match-face-4 (:foreground nohl-orange))

  ;; Jabber
  (jabber-chat-prompt-local (:foreground nohl-yellow))
  (jabber-chat-prompt-foreign (:foreground nohl-orange))
  (jabber-chat-prompt-system (:foreground nohl-yellow :weight 'bold))
  (jabber-chat-text-local (:foreground nohl-yellow))
  (jabber-chat-text-foreign (:foreground nohl-orange))
  (jabber-chat-text-error (:foreground nohl-red))

  (jabber-roster-user-online (:foreground nohl-green))
  (jabber-roster-user-xa :foreground nohl-comment)
  (jabber-roster-user-dnd :foreground nohl-yellow)
  (jabber-roster-user-away (:foreground nohl-orange))
  (jabber-roster-user-chatty (:foreground nohl-purple))
  (jabber-roster-user-error (:foreground nohl-red))
  (jabber-roster-user-offline (:foreground nohl-comment))

  (jabber-rare-time-face (:foreground nohl-comment))
  (jabber-activity-face (:foreground nohl-purple))
  (jabber-activity-personal-face (:foreground nohl-aqua))

  ;; Cperl
  (cperl-array-face (:foreground nohl-blue :weight 'bold))
  (cperl-hash-face (:foreground nohl-red :slant 'italic))
  (cperl-nonoverridable-face (:foreground nohl-purple))

  ;; js2-mode
  (js2-warning (:underline nohl-orange))
  (js2-error (:foreground nil :underline nohl-red))
  (js2-external-variable (:foreground nohl-purple))
  (js2-function-param (:foreground nohl-blue))
  (js2-instance-member (:foreground nohl-blue))
  (js2-private-function-call (:foreground nohl-red))
  ;; js2-mode additional attributes for better syntax highlight in javascript
  (js2-jsdoc-tag (:foreground nohl-aqua))
  (js2-jsdoc-type (:foreground nohl-orange))
  (js2-jsdoc-value (:foreground nohl-orange))
  (js2-function-call (:foreground nohl-green))
  (js2-object-property (:foreground nohl-orange))
  (js2-private-member (:foreground nohl-purple))
  (js2-jsdoc-html-tag-name (:foreground nohl-orange))
  (js2-jsdoc-html-tag-delimiter (:foreground nohl-orange))

  ;; js3-mode
  (js3-warning-face (:underline nohl-orange))
  (js3-error-face (:foreground nil :underline nohl-red))
  (js3-external-variable-face (:foreground nohl-purple))
  (js3-function-param-face (:foreground nohl-blue))
  (js3-jsdoc-tag-face (:foreground nohl-orange))
  (js3-jsdoc-type-face (:foreground nohl-aqua))
  (js3-jsdoc-value-face (:foreground nohl-yellow))
  (js3-jsdoc-html-tag-name-face (:foreground nohl-blue))
  (js3-jsdoc-html-tag-delimiter-face (:foreground nohl-green))
  (js3-instance-member-face (:foreground nohl-blue))
  (js3-private-function-call-face (:foreground nohl-red))

  ;; Ledger-mode
  (ledger-font-comment-face (:inherit 'font-lock-comment-face))
  (ledger-font-occur-narrowed-face (:inherit 'font-lock-comment-face :invisible t))
  (ledger-font-occur-xact-face (:inherit 'highlight))
  (ledger-font-payee-cleared-face (:foreground nohl-green))
  (ledger-font-payee-uncleared-face (:foreground nohl-aqua))
  (ledger-font-posting-date-face (:foreground nohl-orange))
  (ledger-font-posting-amount-face (:foreground nohl-fg))
  (ledger-font-posting-account-cleared-face (:foreground nohl-blue))
  (ledger-font-posting-account-face (:foreground nohl-purple))
  (ledger-font-posting-account-pending-face (:foreground nohl-yellow))
  (ledger-font-xact-highlight-face (:inherit 'highlight))
  (ledger-occur-narrowed-face (:inherit 'font-lock-comment-face :invisible t))
  (ledger-occur-xact-face (:inherit 'highlight))

  ;; Lispy
  (lispy-command-name-face (:inherit 'font-lock-function-name-face :background nohl-highlight))
  (lispy-cursor-face (:foreground nohl-bg :background nohl-fg))
  (lispy-face-hint (:foreground nohl-green :background nohl-contrast-bg))

  ;; macrostep
  (macrostep-expansion-highlight-face (:inherit 'highlight :foreground nil))

  ;; Magit
  (magit-bisect-bad (:foreground nohl-red))
  (magit-bisect-good (:foreground nohl-green))
  (magit-bisect-skip (:foreground nohl-orange))
  (magit-blame-date (:foreground nohl-red))
  (magit-blame-heading (:foreground nohl-orange :background nohl-highlight :extend t))
  (magit-branch-current (:foreground nohl-blue))
  (magit-branch-local (:foreground nohl-aqua))
  (magit-branch-remote (:foreground nohl-green))
  (magit-cherry-equivalent (:foreground nohl-purple))
  (magit-cherry-unmatched (:foreground nohl-aqua))
  (magit-diff-added (:foreground nohl-green :extend t))
  (magit-diff-added-highlight (:foreground nohl-green :background nohl-highlight :extend t))
  (magit-diff-base (:foreground nohl-bg :background nohl-orange :extend t))
  (magit-diff-base-highlight (:foreground nohl-orange :background nohl-highlight :extend t))
  (magit-diff-context (:foreground nohl-comment :extend t))
  (magit-diff-context-highlight (:foreground nohl-comment :background nohl-highlight :extend t))
  (magit-diff-file-heading (:foreground nohl-fg :extend t))
  (magit-diff-file-heading-highlight (:background nohl-contrast-bg :weight 'bold :extend t))
  (magit-diff-file-heading-selection (:foreground nohl-orange :background nohl-highlight :extend t))
  (magit-diff-hunk-heading (:foreground nohl-fg :background nohl-contrast-bg :extend t))
  (magit-diff-hunk-heading-highlight (:background nohl-contrast-bg :extend t))
  (magit-diff-lines-heading (:foreground nohl-yellow :background nohl-red :extend t))
  (magit-diff-removed (:foreground nohl-orange :extend t))
  (magit-diff-removed-highlight (:foreground nohl-orange :background nohl-highlight :extend t))
  (magit-diffstat-added (:foreground nohl-green))
  (magit-diffstat-removed (:foreground nohl-orange))
  (magit-dimmed (:foreground nohl-comment))
  (magit-filename (:foreground nohl-purple))
  (magit-hash (:foreground nohl-comment))
  (magit-header-line (:inherit nil :weight 'bold))
  (magit-log-author (:foreground nohl-orange))
  (magit-log-date (:foreground nohl-blue))
  (magit-log-graph (:foreground nohl-comment))
  (magit-mode-line-process (:foreground nohl-orange))
  (magit-mode-line-process-error (:foreground nohl-red))
  (magit-process-ng (:inherit 'error))
  (magit-process-ok (:inherit 'success))
  (magit-reflog-amend (:foreground nohl-purple))
  (magit-reflog-checkout (:foreground nohl-blue))
  (magit-reflog-cherry-pick (:foreground nohl-green))
  (magit-reflog-commit (:foreground nohl-green))
  (magit-reflog-merge (:foreground nohl-green))
  (magit-reflog-other (:foreground nohl-aqua))
  (magit-reflog-rebase (:foreground nohl-purple))
  (magit-reflog-remote (:foreground nohl-aqua))
  (magit-reflog-reset (:inherit 'error))
  (magit-refname (:foreground nohl-comment))
  (magit-section-heading (:foreground nohl-yellow :weight 'bold :extend t))
  (magit-section-heading-selection (:foreground nohl-orange :weight 'bold :extend t))
  (magit-section-highlight (:background nohl-highlight :weight 'bold :extend t))
  (magit-sequence-drop (:foreground nohl-red))
  (magit-sequence-head (:foreground nohl-blue))
  (magit-sequence-part (:foreground nohl-orange))
  (magit-sequence-stop (:foreground nohl-green))
  (magit-signature-bad (:inherit 'error))
  (magit-signature-error (:inherit 'error))
  (magit-signature-expired (:foreground nohl-orange))
  (magit-signature-good (:inherit 'success))
  (magit-signature-revoked (:foreground nohl-purple))
  (magit-signature-untrusted (:foreground nohl-aqua))
  (magit-tag (:foreground nohl-yellow))

  ;; mark-multiple
  (mm/master-face (:inherit 'region :foreground nil :background nil))
  (mm/mirror-face (:inherit 'region :foreground nil :background nil))

  ;; markdown
  (markdown-url-face (:inherit 'link))
  (markdown-link-face (:foreground nohl-blue :underline t))
  (markdown-code-face (:inherit 'fixed-pitch :background nohl-bg :foreground nohl-purple))
  (markdown-inline-code-face (:inherit 'markdown-code-face))

  ;; markup
  (markup-code-face (:inherit 'fixed-pitch :background nohl-bg :foreground nohl-purple))
  (markup-complex-replacement-face (:background nohl-bg))
  (markup-error-face (:foreground nohl-red :background nohl-bg :weight 'bold))
  (markup-gen-face (:foreground nohl-blue))
  (markup-list-face (:foreground nil :background nil))
  (markup-meta-face (:foreground nohl-comment))
  (markup-meta-hide-face (:foreground nohl-comment))
  (markup-reference-face (:inherit 'link))
  (markup-secondary-text-face (:foreground nohl-comment))
  (markup-title-0-face (:foreground nohl-blue :weight 'bold :height 1.4))
  (markup-title-1-face (:foreground nohl-purple :weight 'bold :height 1.2))
  (markup-title-2-face (:foreground nohl-orange :weight 'bold))
  (markup-title-3-face (:foreground nohl-green :weight 'bold))
  (markup-title-4-face (:foreground nohl-blue :weight 'bold))
  (markup-title-5-face (:foreground nohl-purple :weight 'bold))
  (markup-typewriter-face (:inherit 'shadow))
  (markup-verbatim-face (:inherit 'shadow :background nohl-bg))

  ;; Merlin (ocaml)
  (merlin-compilation-error-face (:inherit 'flycheck-error))
  (merlin-compilation-warning-face (:inherit 'flycheck-warning))

  ;; mu4e
  (mu4e-header-highlight-face (:underline nil :inherit 'region))
  (mu4e-header-marks-face (:underline nil :foreground nohl-yellow))
  (mu4e-flagged-face (:foreground nohl-orange :inherit nil))
  (mu4e-replied-face (:foreground nohl-blue :inherit nil))
  (mu4e-unread-face (:foreground nohl-yellow :inherit nil))
  (mu4e-cited-1-face (:foreground nohl-blue :slant 'normal))
  (mu4e-cited-2-face (:foreground nohl-purple :slant 'normal))
  (mu4e-cited-3-face (:foreground nohl-aqua :slant 'normal))
  (mu4e-cited-4-face (:foreground nohl-yellow :slant 'normal))
  (mu4e-cited-5-face (:foreground nohl-orange :slant 'normal))
  (mu4e-cited-6-face (:foreground nohl-blue :slant 'normal))
  (mu4e-cited-7-face (:foreground nohl-purple :slant 'normal))
  (mu4e-ok-face (:foreground nohl-green))
  (mu4e-view-contact-face (:inherit nil :foreground nohl-yellow))
  (mu4e-view-link-face (:inherit 'link :foreground nohl-blue))
  (mu4e-view-url-number-face (:inherit nil :foreground nohl-aqua))
  (mu4e-view-attach-number-face (:inherit nil :foreground nohl-orange))
  (mu4e-highlight-face (:inherit 'highlight))
  (mu4e-title-face (:inherit nil :foreground nohl-green))

  ;; MMM-mode
  (mmm-code-submode-face (:background nohl-contrast-bg))
  (mmm-comment-submode-face (:inherit 'font-lock-comment-face))
  (mmm-output-submode-face (:background nohl-contrast-bg))

  ;; mini-modeline
  (mini-modeline-mode-line (:inherit 'mode-line :height 0.1 :box nil))

  ;; neotree
  (neo-banner-face (:foreground nohl-blue :weight 'bold))
  (neo-button-face (:underline t))
  (neo-dir-link-face (:foreground nohl-orange))
  (neo-expand-btn-face (:foreground nohl-comment))
  (neo-file-link-face (:foreground nohl-fg))
  (neo-header-face (:foreground nohl-fg :background nohl-highlight))
  (neo-root-dir-face (:foreground nohl-blue :weight 'bold))
  (neo-vc-added-face (:foreground nohl-green))
  (neo-vc-conflict-face (:foreground nohl-red))
  (neo-vc-default-face (:foreground nohl-fg))
  (neo-vc-edited-face (:foreground nohl-purple))
  (neo-vc-ignored-face (:foreground nohl-contrast-bg))
  (neo-vc-missing-face (:foreground nohl-red))
  (neo-vc-needs-merge-face (:foreground nohl-red))
  (neo-vc-unlocked-changes-face (:foreground nohl-blue :slant 'italic))
  (neo-vc-user-face (:foreground nohl-red :slant 'italic))

  ;; nswbuff
  (nswbuff-current-buffer-face (:foreground nohl-blue :weight 'bold :underline nil))
  (nswbuff-default-face (:foreground nohl-fg :background nohl-bg))
  (nswbuff-separator-face (:foreground nohl-comment))
  (nswbuff-special-buffers-face (:foreground nohl-purple :bold nil :underline nil))

  ;; Parenthesis matching (mic-paren)
  (paren-face-match (:foreground nil :background nil :inherit 'show-paren-match))
  (paren-face-mismatch (:foreground nil :background nil :inherit 'show-paren-mismatch))
  (paren-face-no-match (:foreground nil :background nil :inherit 'show-paren-mismatch))

  ;; Parenthesis dimming (parenface)
  (paren-face (:foreground nohl-comment :background nil))

  ;; Perspective
  (persp-selected-face (:foreground nohl-yellow :weight 'bold))

  ;; Powerline
  (powerline-active1 (:foreground nohl-fg :background nohl-highlight))
  (powerline-active2 (:foreground nohl-fg :background nohl-contrast-bg))

  ;; Powerline-evil
  (powerline-evil-base-face (:inherit 'mode-line :foreground nohl-bg))
  (powerline-evil-emacs-face (:inherit 'powerline-evil-base-face :background nohl-purple))
  (powerline-evil-insert-face (:inherit 'powerline-evil-base-face :background nohl-blue))
  (powerline-evil-motion-face (:inherit 'powerline-evil-base-face :background nohl-orange))
  (powerline-evil-normal-face (:inherit 'powerline-evil-base-face :background nohl-green))
  (powerline-evil-operator-face (:inherit 'powerline-evil-base-face :background nohl-aqua))
  (powerline-evil-replace-face (:inherit 'powerline-evil-base-face :background nohl-red))
  (powerline-evil-visual-face (:inherit 'powerline-evil-base-face :background nohl-yellow))

  (pulse-highlight-start-face (:background nohl-red))

  ;; Python-specific overrides
  (py-builtins-face (:foreground nohl-orange :weight 'normal))

  ;; Rainbow-delimiters
  (rainbow-delimiters-depth-1-face (:foreground nohl-fg))
  (rainbow-delimiters-depth-2-face (:foreground nohl-aqua))
  (rainbow-delimiters-depth-3-face (:foreground nohl-yellow))
  (rainbow-delimiters-depth-4-face (:foreground nohl-green))
  (rainbow-delimiters-depth-5-face (:foreground nohl-blue))
  (rainbow-delimiters-depth-6-face (:foreground nohl-fg))
  (rainbow-delimiters-depth-7-face (:foreground nohl-aqua))
  (rainbow-delimiters-depth-8-face (:foreground nohl-yellow))
  (rainbow-delimiters-depth-9-face (:foreground nohl-green))
  (rainbow-delimiters-unmatched-face (:foreground nohl-red))

  ;; regex-tool
  (regex-tool-matched-face (:foreground nil :background nil :inherit 'match))

  ;; RHTML
  (erb-delim-face (:background nohl-contrast-bg))
  (erb-exec-face (:background nohl-contrast-bg :weight 'bold))
  (erb-exec-delim-face (:background nohl-contrast-bg))
  (erb-out-face (:background nohl-contrast-bg :weight 'bold))
  (erb-out-delim-face (:background nohl-contrast-bg))
  (erb-comment-face (:background nohl-contrast-bg :weight 'bold :slant 'italic))
  (erb-comment-delim-face (:background nohl-contrast-bg))

  ;; rpm-spec-mode
  (rpm-spec-dir-face (:foreground nohl-green))
  (rpm-spec-doc-face (:foreground nohl-green))
  (rpm-spec-ghost-face (:foreground nohl-red))
  (rpm-spec-macro-face (:foreground nohl-yellow))
  (rpm-spec-obsolete-tag-face (:foreground nohl-red))
  (rpm-spec-package-face (:foreground nohl-red))
  (rpm-spec-section-face (:foreground nohl-yellow))
  (rpm-spec-tag-face (:foreground nohl-blue))
  (rpm-spec-var-face (:foreground nohl-red))

  ;; Selectrum
  (selectrum-current-candidate (:background nohl-contrast-bg))
  (selectrum-primary-highlight (:foreground nohl-aqua))
  (selectrum-secondary-highlight (:foreground nohl-yellow))
  (selectrum-completion-docsig (:inherit 'completions-annotation :underline t))

  ;; SLIME
  (slime-highlight-edits-face (:weight 'bold))
  (slime-repl-input-face (:weight 'normal :underline nil))
  (slime-repl-prompt-face (:underline nil :weight 'bold :foreground nohl-purple))
  (slime-repl-result-face (:foreground nohl-green))
  (slime-repl-output-face (:foreground nohl-blue :background nohl-bg))
  (slime-repl-inputed-output-face (:foreground nohl-comment))

  ;; SLY
  (sly-error-face (:underline (:style 'wave :color nohl-red)))
  (sly-mrepl-output-face (:foreground nohl-purple :background nohl-bg))
  (sly-note-face (:underline (:style 'wave :color nohl-green)))
  (sly-style-warning-face (:underline (:style 'wave :color nohl-yellow)))
  (sly-warning-face (:underline (:style 'wave :color nohl-orange)))
  (sly-stickers-armed-face (:foreground nohl-bg :background nohl-blue))
  (sly-stickers-empty-face (:foreground nohl-bg :background nohl-comment))
  (sly-stickers-placed-face (:foreground nohl-bg :background nohl-fg))
  (sly-stickers-recordings-face (:foreground nohl-bg :background nohl-green))

  ;; Smartparens paren matching
  (sp-show-pair-match-face (:foreground nil :background nil :inherit 'show-paren-match))
  (sp-show-pair-mismatch-face (:foreground nil :background nil :inherit 'show-paren-mismatch))

  ;; stripe-buffer
  (stripe-highlight (:inherit 'highlight))

  ;; swiper
  (swiper-line-face (:underline t))

  ;; sx
  (sx-question-mode-content-face (:background nohl-highlight))
  (sx-question-list-answers (:inherit 'sx-question-list-parent :foreground nohl-green))
  (sx-question-mode-accepted (:inherit 'sx-question-mode-title :foreground nohl-green))
  (sx-question-mode-kbd-tag (:weight 'semi-bold :box (:line-width 3 :style 'released-button :color nohl-contrast-bg)))

  ;; symbol-overlay
  (symbol-overlay-default-face (:inherit 'highlight :underline t))

  ;; syslog-mode
  (syslog-debug (:weight 'bold :foreground nohl-green))
  (syslog-error (:weight 'bold :foreground nohl-red))
  (syslog-hide (:foregound nohl-comment))
  (syslog-info (:weight 'bold :foreground nohl-blue))
  (syslog-su (:weight 'bold :foreground nohl-purple))
  (syslog-warn (:weight 'bold :foreground nohl-orange))

  ;; transient
  (transient-enabled-suffix (:foreground nohl-low-contrast-bg :background nohl-green :weight 'bold))
  (transient-disabled-suffix (:foreground nohl-fg :background nohl-red :weight 'bold))

  ;; tuareg-mode (ocaml)
  (tuareg-font-lock-constructor-face (:inherit 'default :weight 'bold))
  (tuareg-font-lock-governing-face (:inherit 'font-lock-keyword-face :weight 'bold))
  (tuareg-font-lock-multistage-face (:inherit 'font-lock-preprocessor-face))
  (tuareg-font-lock-line-number-face (:foreground nohl-comment))
  (tuareg-font-lock-operator-face (:inherit 'font-lock-preprocessor-face))
  (tuareg-font-lock-interactive-error-face (:inherit 'error))
  (tuareg-font-double-semicolon-face (:inherit 'warning :slant 'italic))
  (tuareg-font-lock-error-face (:inherit 'error :slant 'italic))
  (tuareg-font-lock-interactive-output-face)
  (tuareg-font-lock-interactive-directive-face)

  ;; twittering-mode
  (twittering-username-face (:inherit 'erc-pal-face))
  (twittering-uri-face (:foreground nohl-blue :inherit 'link))
  (twittering-timeline-header-face (:foreground nohl-green :weight 'bold))
  (twittering-timeline-footer-face (:inherit 'twittering-timeline-header-face))

  ;; undo-tree
  (undo-tree-visualizer-default-face (:foreground nohl-fg))
  (undo-tree-visualizer-current-face (:foreground nohl-green :weight 'bold))
  (undo-tree-visualizer-active-branch-face (:foreground nohl-red))
  (undo-tree-visualizer-register-face (:foreground nohl-yellow))

  ;; vertico
  (vertico-current (:background nohl-contrast-bg :extend t))

  ;; visual-regexp
  (vr/match-0 (:foreground nohl-yellow :background nohl-bg :inverse-video t))
  (vr/match-1 (:foreground nohl-aqua :background nohl-bg :inverse-video t))
  (vr/group-0 (:foreground nohl-purple :background nohl-bg :inverse-video t))
  (vr/group-1 (:foreground nohl-green :background nohl-bg :inverse-video t))
  (vr/group-2 (:foreground nohl-orange :background nohl-bg :inverse-video t))

  ;; vterm
  ;; (vterm-color-black (:background ,term-black :foreground ,term-black))
  ;; (vterm-color-blue (:background nohl-blue :foreground nohl-blue))
  ;; (vterm-color-cyan (:background nohl-aqua :foreground nohl-aqua))
  ;; (vterm-color-default (:foreground nil :background nil :inherit 'default))
  ;; (vterm-color-green (:background nohl-green :foreground nohl-green))
  ;; (vterm-color-magenta (:background nohl-purple :foreground nohl-purple))
  ;; (vterm-color-red (:background nohl-red :foreground nohl-red))
  ;; (vterm-color-white (:background ,term-white :foreground ,term-white))
  ;; (vterm-color-yellow (:background nohl-yellow :foreground nohl-yellow))
  ;; (vterm-color-underline (:underline t))
  ;; (vterm-color-inverse-video (:background nohl-bg :inverse-video t))

  ;; web-mode
  (web-mode-doctype-face (:inherit 'font-lock-string-face))
  (web-mode-html-attr-equal-face (:foreground nil :background nil :inherit 'default))
  (web-mode-html-attr-name-face (:inherit 'font-lock-variable-name-face))
  (web-mode-html-tag-face (:inherit 'font-lock-function-name-face))
  (web-mode-html-tag-bracket-face (:inherit 'font-lock-function-name-face))
  (web-mode-symbol-face (:inherit 'font-lock-constant-face))

  ;; weechat
  (weechat-highlight-face (:foreground nohl-orange))
  (weechat-nick-self-face (:foreground nohl-green))
  (weechat-time-face (:foreground nohl-aqua))

  ;; wgrep
  (wgrep-delete-face (:foreground nohl-red))
  (wgrep-done-face (:foreground nohl-blue))
  (wgrep-face (:foreground nohl-green :background nohl-contrast-bg))
  (wgrep-file-face (:foreground nohl-comment :background nohl-contrast-bg))
  (wgrep-reject-face (:foreground nohl-orange :weight 'bold))

  ;; xcscope
  (cscope-file-face (:foreground nohl-green))
  (cscope-function-face (:foreground nohl-blue))
  (cscope-line-number-face (:foreground nohl-red))
  (cscope-separator-face (:bold t :overline t :underline t :foreground nohl-purple))

  ;; ztree
  (ztreep-arrow-face (:foreground nohl-highlight))
  (ztreep-diff-header-face (:foreground nohl-yellow :weight 'bold))
  (ztreep-diff-header-small-face (:foregorund nohl-yellow))
  (ztreep-diff-model-add-face (:foreground nohl-green))
  (ztreep-diff-model-diff-face (:foreground nohl-red))
  (ztreep-diff-model-ignored-face (:foreground nohl-orange))
  (ztreep-diff-model-normal-face (:foreground nohl-fg))
  (ztreep-expand-sign-face (:foreground nohl-fg))
  (ztreep-header-face (:forground nohl-yellow :weight 'bold))
  (ztreep-leaf-face (:foreground nohl-aqua))
  (ztreep-node-face (:foreground nohl-fg))
  ))

(provide-theme 'nohl)
